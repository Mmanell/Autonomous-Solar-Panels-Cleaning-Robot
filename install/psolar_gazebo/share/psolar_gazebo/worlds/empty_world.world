<?xml version="1.0"?>
<sdf version="1.6">

  <world name="default">
  <!-- Processes pose commands -->

<plugin
  filename="gz-sim-physics-system"
  name="gz::sim::systems::Physics">
</plugin>
<!-- Handles requests to update the spherical coordinates -->
<plugin
  filename="gz-sim-user-commands-system"
  name="gz::sim::systems::UserCommands">
</plugin>
<!-- Populates the GUI with data from the server -->
<plugin
  filename="gz-sim-scene-broadcaster-system"
  name="gz::sim::systems::SceneBroadcaster">
</plugin>
<plugin
  filename="gz-sim-sensors-system"
  name="gz::sim::systems::Sensors">
  <render_engine>ogre2</render_engine>
</plugin>

<plugin
  filename="gz-sim-imu-system"
  name="gz::sim::systems::Imu">
</plugin>
<spherical_coordinates>
  <surface_model>EARTH_WGS84</surface_model>
  <world_frame_orientation>ENU</world_frame_orientation>
  <latitude_deg>-22.986687</latitude_deg>
  <longitude_deg>-43.202501</longitude_deg>
  <elevation>0</elevation>
  <heading_deg>0</heading_deg>
</spherical_coordinates>


 <model name="solar_panel">
   <static>true</static> <!-- Set to true if it's a static object in the world -->
   <link name="panel_link">
     <visual name="visual">
       <geometry>
         <mesh>
           <uri>model://turtlebot3_common/meshes/solar_origin.dae</uri>
           <!-- Adjust scale if necessary, usually 1 1 1 if it's already in meters -->
           <scale>1 1 1</scale>
         </mesh>
       </geometry>
       <material>
         <ambient>0.1 0.1 0.1 1</ambient>
         <diffuse>0.1 0.1 0.1 1</diffuse>
         <specular>0.1 0.1 0.1 1</specular>
         <emissive>0.0 0.0 0.0 1</emissive>
       </material>
     </visual>
     <collision name="collision">
       <geometry>
       <mesh>
           <uri>model://turtlebot3_common/meshes/solar_origin.dae</uri>
           <!-- Adjust scale if necessary, usually 1 1 1 if it's already in meters -->
           <scale>1 1 1</scale>
         </mesh>   
       </geometry>
       <surface>
       <friction>
         <ode>
           <mu>1.5</mu>  <!-- High friction -->
           <mu2>1.5</mu2>
         </ode>
       </friction>
     </surface>
     </collision>
     <inertial>
       <mass>1.0</mass>
       <inertia>
         <ixx>0.01</ixx> <ixy>0</ixy> <ixz>0</ixz>
         <iyy>0.01</iyy> <iyz>0</iyz>
         <izz>0.01</izz>
       </inertia>
      
     </inertial>
   </link>
   <pose>-0.3 -0.3 -0.2 0 0 0</pose> <!-- Initial pose, can be overridden when spawned -->


   <!-- Add a solar panel plugin if you want it to generate power -->
   <!-- This is a conceptual plugin, you might need to find or create one -->
   <!-- <plugin name="solar_panel_power_plugin" filename="libSolarPanelPowerPlugin.so">
     <power_output>100.0</power_output>
   </plugin> -->


 </model> 




    <include>
      <uri>https://fuel.gazebosim.org/1.0/OpenRobotics/models/Ground Plane</uri>
    </include>

    <include>
      <uri>https://fuel.gazebosim.org/1.0/OpenRobotics/models/Sun</uri>
    </include>

    <scene>
      <shadows>false</shadows>
    </scene>

    <gui fullscreen='0'>
      <camera name='user_camera'>
        <pose frame=''>0.319654 -0.235002 9.29441 0 1.5138 0.009599</pose>
        <view_controller>orbit</view_controller>
        <projection_type>perspective</projection_type>
      </camera>
    </gui>

    <physics type="ode">
      <real_time_update_rate>1000.0</real_time_update_rate>
      <max_step_size>0.001</max_step_size>
      <real_time_factor>1</real_time_factor>
      <ode>
        <solver>
          <type>quick</type>
          <iters>150</iters>
          <precon_iters>0</precon_iters>
          <sor>1.400000</sor>
          <use_dynamic_moi_rescaling>1</use_dynamic_moi_rescaling>
        </solver>
        <constraints>
          <cfm>0.00001</cfm>
          <erp>0.2</erp>
          <contact_max_correcting_vel>2000.000000</contact_max_correcting_vel>
          <contact_surface_layer>0.01000</contact_surface_layer>
        </constraints>
      </ode>
    </physics>

  </world>
</sdf>
