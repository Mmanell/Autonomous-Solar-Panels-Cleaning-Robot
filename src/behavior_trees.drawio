<mxfile host="65bd71144e">
    <diagram id="KQbjy2cgEPVBMzKb61xz" name="Page-1">
        <mxGraphModel dx="660" dy="616" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <mxCell id="3" value="&lt;font style=&quot;font-size: 14px;&quot;&gt;Bt trees basic concepts:&lt;/font&gt;&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;1- A tick: A signal that propagates through a tree until it reaches a leaf node.&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;When the tick reaches a leaf node, it activates a callback function and it must return its status:&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;FAILURE&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;RUNNING&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;SUCCESS&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;Type of nodes:&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;Control node: Ticks a child based on the result of its sublings/ its own state&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;Decorator node: It may alter the result of its child or tick it multiple times&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;Condition node: Should not alter the system&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;Action node: does something&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;Action nodes have two types:&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;Asynchronous actions: Need to be ticked again until SUCCES or FAILURE are signaled&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;Synchronous actions: Blocks the tree until it return SUCCESS or FAILURE&amp;nbsp;&lt;/font&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
                    <mxGeometry y="40" width="290" height="280" as="geometry"/>
                </mxCell>
                <mxCell id="4" value="Decorator node:&lt;div&gt;-Transform the result it received from the child (Inverter)&lt;/div&gt;&lt;div&gt;-Halt the execution of the child&lt;/div&gt;&lt;div&gt;-Repeat ticking the child (Retry until successful num_attemps)&lt;/div&gt;&lt;div&gt;-&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
                    <mxGeometry y="450" width="220" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="18" value="Control nodes:&amp;nbsp;&lt;div&gt;1/ Sequence&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;If a child returns SUCCESS, tick the next one.&lt;/li&gt;&lt;li&gt;If a child returns FAILURE, then no more children are ticked, and the Sequence returns FAILURE.&lt;/li&gt;&lt;li&gt;If &lt;strong&gt;all&lt;/strong&gt; the children return SUCCESS, then the Sequence returns SUCCESS too.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;2/ Fallback&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If a child returns FAILURE, tick the next one.&lt;/li&gt;&lt;li&gt;If a child returns SUCCESS, then no more children are ticked and the&lt;br/&gt;Fallback returns SUCCESS.&lt;/li&gt;&lt;li&gt;If all the children return FAILURE, then the Fallback returns FAILURE too.&lt;/li&gt;&lt;li&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;3/&amp;nbsp;&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
                    <mxGeometry x="10" y="730" width="180" height="150" as="geometry"/>
                </mxCell>
                <mxCell id="19" value="Library BehaviorTree.CPP&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;The user must create the leaf nodes:&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;ActionNodes&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;ConditionNode&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;We instatiate the tree at deployment time using the XML format&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;Any tree node can invoke a callback which must be programmed by the user&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;Example:&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;pre class=&quot;prism-code language-cpp codeBlock_bY9V thin-scrollbar&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;codeBlockLines_e6Vv&quot;&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token-line&quot;&gt;&lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot; class=&quot;token comment&quot;&gt;// The simplest callback you can wrap into a BT Action&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token-line&quot;&gt;&lt;span class=&quot;token plain&quot;&gt;NodeStatus &lt;/span&gt;&lt;span style=&quot;color: rgb(215, 58, 73);&quot; class=&quot;token function&quot;&gt;HelloTick&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token-line&quot;&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token-line&quot;&gt;&lt;span class=&quot;token plain&quot;&gt;  std&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;cout &lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(227, 17, 108);&quot; class=&quot;token string&quot;&gt;&quot;Hello World\n&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token-line&quot;&gt;&lt;span class=&quot;token plain&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 159);&quot; class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; NodeStatus&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;SUCCESS&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token-line&quot;&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;prism-code language-cpp codeBlock_bY9V thin-scrollbar&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;codeBlockLines_e6Vv&quot;&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token-line&quot;&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token punctuation&quot;&gt;&lt;pre class=&quot;prism-code language-cpp codeBlock_bY9V thin-scrollbar&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;codeBlockLines_e6Vv&quot;&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token-line&quot;&gt;&lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot; class=&quot;token comment&quot;&gt;// Allow the library to create Actions that invoke HelloTick()&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token-line&quot;&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(153, 153, 136); font-style: italic;&quot; class=&quot;token comment&quot;&gt;// (explained in the tutorials)&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token-line&quot;&gt;&lt;span class=&quot;token plain&quot;&gt;factory&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(215, 58, 73);&quot; class=&quot;token function&quot;&gt;registerSimpleAction&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: rgb(227, 17, 108);&quot; class=&quot;token string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt; std&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: rgb(215, 58, 73);&quot; class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;HelloTick&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: rgb(57, 58, 52);&quot; class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/font&gt;&lt;/font&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
                    <mxGeometry x="310" y="410" width="260" height="160" as="geometry"/>
                </mxCell>
                <mxCell id="20" value="XML scheme&lt;div&gt;&lt;div&gt;&amp;nbsp;&amp;lt;root BTCPP_format=&quot;4&quot;&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;BehaviorTree ID=&quot;MainTree&quot;&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;Sequence name=&quot;root_sequence&quot;&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;SaySomething&amp;nbsp; &amp;nbsp;name=&quot;action_hello&quot; message=&quot;Hello&quot;/&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;OpenGripper&amp;nbsp; &amp;nbsp; name=&quot;open_gripper&quot;/&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;ApproachObject name=&quot;approach_object&quot;/&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;CloseGripper&amp;nbsp; &amp;nbsp;name=&quot;close_gripper&quot;/&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/Sequence&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;/BehaviorTree&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;lt;/root&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;A BB key is represented using this syntax: &lt;code&gt;{key_name}&lt;/code&gt;.&lt;/div&gt;&lt;div&gt;Example:&amp;nbsp;&lt;span style=&quot;color: rgb(63, 63, 63); background-color: rgba(255, 255, 255, 0.1); font-family: monospace;&quot;&gt; &amp;lt;SaySomething message=&quot;{my_message}&quot;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(63, 63, 63); background-color: rgba(255, 255, 255, 0.1); font-family: monospace;&quot;&gt;Explicit vs Compact:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: rgba(255, 255, 255, 0.1); color: rgb(63, 63, 63);&quot;&gt;&lt;font face=&quot;monospace&quot;&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp;&amp;lt;root BTCPP_format=&quot;4&quot; &amp;gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;BehaviorTree ID=&quot;MainTree&quot;&amp;gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;Sequence name=&quot;root_sequence&quot;&amp;gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;SaySomething&amp;nbsp; &amp;nbsp;name=&quot;action_hello&quot; message=&quot;Hello&quot;/&amp;gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;OpenGripper&amp;nbsp; &amp;nbsp; name=&quot;open_gripper&quot;/&amp;gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;ApproachObject name=&quot;approach_object&quot;/&amp;gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;CloseGripper&amp;nbsp; &amp;nbsp;name=&quot;close_gripper&quot;/&amp;gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/Sequence&amp;gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;lt;/BehaviorTree&amp;gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;lt;!-- the BT executor don&#39;t require this, but Groot does --&amp;gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;lt;TreeNodeModel&amp;gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;Action ID=&quot;SaySomething&quot;&amp;gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;input_port name=&quot;message&quot; type=&quot;std::string&quot; /&amp;gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/Action&amp;gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;Action ID=&quot;OpenGripper&quot;/&amp;gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;Action ID=&quot;ApproachObject&quot;/&amp;gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;Action ID=&quot;CloseGripper&quot;/&amp;gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;lt;/TreeNodeModel&amp;gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp;&amp;lt;/root&amp;gt;&lt;/div&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
                    <mxGeometry x="200" y="940" width="300" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="21" value="Subtrees:&lt;div&gt;&lt;div&gt;&amp;nbsp;&amp;lt;root BTCPP_format=&quot;4&quot; &amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;BehaviorTree ID=&quot;MainTree&quot;&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;Sequence&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;Action&amp;nbsp; ID=&quot;SaySomething&quot;&amp;nbsp; message=&quot;Hello World&quot;/&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;SubTree ID=&quot;GraspObject&quot;/&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/Sequence&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;/BehaviorTree&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;BehaviorTree ID=&quot;GraspObject&quot;&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;Sequence&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;Action ID=&quot;OpenGripper&quot;/&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;Action ID=&quot;ApproachObject&quot;/&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;Action ID=&quot;CloseGripper&quot;/&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/Sequence&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;/BehaviorTree&amp;gt;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;lt;/root&amp;gt;&lt;/div&gt;&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
                    <mxGeometry x="510" y="770" width="300" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="22" value="INcluding external files:&lt;div&gt;&amp;lt;include ros_pkg=&quot;name_package&quot;&amp;nbsp; path=&quot;path_relative_to_pkg/grasp.xml&quot;/&amp;gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
                    <mxGeometry x="530" y="1080" width="300" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="23" value="&lt;div&gt;&lt;div&gt;Creating ActionNodes:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;The recommended way to do so is by inheritance&lt;/div&gt;&lt;div&gt;&lt;div&gt;// Example of custom SyncActionNode (synchronous action)&lt;/div&gt;&lt;div&gt;// without ports.&lt;/div&gt;&lt;div&gt;class ApproachObject : public BT::SyncActionNode&lt;/div&gt;&lt;div&gt;{&lt;/div&gt;&lt;div&gt;public:&lt;/div&gt;&lt;div&gt;&amp;nbsp; ApproachObject(const std::string&amp;amp; name) :&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; BT::SyncActionNode(name, {})&lt;/div&gt;&lt;div&gt;&amp;nbsp; {}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // You must override the virtual function tick()&lt;/div&gt;&lt;div&gt;&amp;nbsp; BT::NodeStatus tick() override&lt;/div&gt;&lt;div&gt;&amp;nbsp; {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; std::cout &amp;lt;&amp;lt; &quot;ApproachObject: &quot; &amp;lt;&amp;lt; this-&amp;gt;name() &amp;lt;&amp;lt; std::endl;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return BT::NodeStatus::SUCCESS;&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;};&lt;/div&gt;&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
                    <mxGeometry x="850" y="535" width="370" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="24" value="We must register our TreeNOdes into the BehaviorTreeFactory and then load the XML from the file&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;#include &quot;behaviortree_cpp/bt_factory.h&quot;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;// file that contains the custom nodes definitions&lt;/div&gt;&lt;div&gt;#include &quot;dummy_nodes.h&quot;&lt;/div&gt;&lt;div&gt;using namespace DummyNodes;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;int main()&lt;/div&gt;&lt;div&gt;{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; // We use the BehaviorTreeFactory to register our custom nodes&lt;/div&gt;&lt;div&gt;&amp;nbsp; BehaviorTreeFactory factory;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // The recommended way to create a Node is through inheritance.&lt;/div&gt;&lt;div&gt;&amp;nbsp; factory.registerNodeType&amp;lt;ApproachObject&amp;gt;(&quot;ApproachObject&quot;);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // Registering a SimpleActionNode using a function pointer.&lt;/div&gt;&lt;div&gt;&amp;nbsp; // You can use C++11 lambdas or std::bind&lt;/div&gt;&lt;div&gt;&amp;nbsp; factory.registerSimpleCondition(&quot;CheckBattery&quot;, [&amp;amp;](TreeNode&amp;amp;) { return CheckBattery(); });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; //You can also create SimpleActionNodes using methods of a class&lt;/div&gt;&lt;div&gt;&amp;nbsp; GripperInterface gripper;&lt;/div&gt;&lt;div&gt;&amp;nbsp; factory.registerSimpleAction(&quot;OpenGripper&quot;, [&amp;amp;](TreeNode&amp;amp;){ return gripper.open(); } );&lt;/div&gt;&lt;div&gt;&amp;nbsp; factory.registerSimpleAction(&quot;CloseGripper&quot;, [&amp;amp;](TreeNode&amp;amp;){ return gripper.close(); } );&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // Trees are created at deployment-time (i.e. at run-time, but only&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // once at the beginning).&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // IMPORTANT: when the object &quot;tree&quot; goes out of scope, all the&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // TreeNodes are destroyed&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;auto tree = factory.createTreeFromFile(&quot;./my_tree.xml&quot;);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // To &quot;execute&quot; a Tree you need to &quot;tick&quot; it.&lt;/div&gt;&lt;div&gt;&amp;nbsp; // The tick is propagated to the children based on the logic of the tree.&lt;/div&gt;&lt;div&gt;&amp;nbsp; // In this case, the entire sequence is executed, because all the children&lt;/div&gt;&lt;div&gt;&amp;nbsp; // of the Sequence return SUCCESS.&lt;/div&gt;&lt;div&gt;&amp;nbsp; tree.tickWhileRunning();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; return 0;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Expected output:&lt;/div&gt;&lt;div&gt;*&lt;/div&gt;&lt;div&gt;&amp;nbsp; [ Battery: OK ]&lt;/div&gt;&lt;div&gt;&amp;nbsp; GripperInterface::open&lt;/div&gt;&lt;div&gt;&amp;nbsp; ApproachObject: approach_object&lt;/div&gt;&lt;div&gt;&amp;nbsp; GripperInterface::close&lt;/div&gt;&lt;div&gt;*/&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
                    <mxGeometry x="890" y="1150" width="240" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="25" value="Blackboards and ports:&lt;div&gt;Blackboard is a simple key/value storage shared by all nodes of the tree&lt;/div&gt;&lt;div&gt;An entry of the blackboard is a key/value pair&lt;/div&gt;&lt;div&gt;An inout port can read an entry in the blackboard, whilst an Output port can write into an entry&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
                    <mxGeometry x="1180" y="780" width="260" height="30" as="geometry"/>
                </mxCell>
                <UserObject label="// SyncActionNode (synchronous action) with an input port.&#xa;class SaySomething : public SyncActionNode&#xa;{&#xa;public:&#xa;  // If your Node has ports, you must use this constructor signature &#xa;  SaySomething(const std::string&amp; name, const NodeConfig&amp; config)&#xa;    : SyncActionNode(name, config)&#xa;  { }&#xa;&#xa;&#xa;  // It is mandatory to define this STATIC method.&#xa;  static PortsList providedPorts()&#xa;  {&#xa;    // This action has a single input port called &quot;message&quot;&#xa;    return { InputPort&lt;std::string&gt;(&quot;message&quot;) };&#xa;  }&#xa;&#xa;&#xa;  // Override the virtual function tick()&#xa;  NodeStatus tick() override&#xa;  {&#xa;    Expected&lt;std::string&gt; msg = getInput&lt;std::string&gt;(&quot;message&quot;);&#xa;    // Check if expected is valid. If not, throw its error&#xa;    if (!msg)&#xa;    {&#xa;      throw BT::RuntimeError(&quot;missing required input [message]: &quot;, &#xa;                              msg.error() );&#xa;    }&#xa;    // use the method value() to extract the valid message.&#xa;    std::cout &lt;&lt; &quot;Robot says: &quot; &lt;&lt; msg.value() &lt;&lt; std::endl;&#xa;    return NodeStatus::SUCCESS;&#xa;  }&#xa;};" link="// SyncActionNode (synchronous action) with an input port.&#xa;class SaySomething : public SyncActionNode&#xa;{&#xa;public:&#xa;  // If your Node has ports, you must use this constructor signature &#xa;  SaySomething(const std::string&amp; name, const NodeConfig&amp; config)&#xa;    : SyncActionNode(name, config)&#xa;  { }&#xa;&#xa;&#xa;  // It is mandatory to define this STATIC method.&#xa;  static PortsList providedPorts()&#xa;  {&#xa;    // This action has a single input port called &quot;message&quot;&#xa;    return { InputPort&lt;std::string&gt;(&quot;message&quot;) };&#xa;  }&#xa;&#xa;&#xa;  // Override the virtual function tick()&#xa;  NodeStatus tick() override&#xa;  {&#xa;    Expected&lt;std::string&gt; msg = getInput&lt;std::string&gt;(&quot;message&quot;);&#xa;    // Check if expected is valid. If not, throw its error&#xa;    if (!msg)&#xa;    {&#xa;      throw BT::RuntimeError(&quot;missing required input [message]: &quot;, &#xa;                              msg.error() );&#xa;    }&#xa;    // use the method value() to extract the valid message.&#xa;    std::cout &lt;&lt; &quot;Robot says: &quot; &lt;&lt; msg.value() &lt;&lt; std::endl;&#xa;    return NodeStatus::SUCCESS;&#xa;  }&#xa;};" id="26">
                    <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="1">
                        <mxGeometry x="1180" y="1020" width="400" height="500" as="geometry"/>
                    </mxCell>
                </UserObject>
                <mxCell id="27" value="class ThinkWhatToSay : public SyncActionNode&#xa;{&#xa;public:&#xa;  ThinkWhatToSay(const std::string&amp; name, const NodeConfig&amp; config)&#xa;    : SyncActionNode(name, config)&#xa;  { }&#xa;&#xa;&#xa;  static PortsList providedPorts()&#xa;  {&#xa;    return { OutputPort&lt;std::string&gt;(&quot;text&quot;) };&#xa;  }&#xa;&#xa;&#xa;  // This Action writes a value into the port &quot;text&quot;&#xa;  NodeStatus tick() override&#xa;  {&#xa;    // the output may change at each tick(). Here we keep it simple.&#xa;    setOutput(&quot;text&quot;, &quot;The answer is 42&quot; );&#xa;    return NodeStatus::SUCCESS;&#xa;  }&#xa;};" style="text;whiteSpace=wrap;" vertex="1" parent="1">
                    <mxGeometry x="1640" y="1030" width="410" height="340" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>